"""
Module x·ª≠ l√Ω k·∫øt qu·∫£ truy v·∫•n v√† t·∫°o c√¢u tr·∫£ l·ªùi
"""
import json
import time
from typing import List, Dict, Literal
from langchain_core.prompts import PromptTemplate
from langchain_core.output_parsers import StrOutputParser
from app.utils.logger import log_info, log_error
from app.llm_clients.gemini_client import gemini_client
from .prompt_templates_updated import RESULT_PROCESSING_TEMPLATE

def _filter_sensitive_data(results: List[Dict], context: Dict = None) -> List[Dict]:
    """
    L·ªçc d·ªØ li·ªáu nh·∫°y c·∫£m t·ª´ k·∫øt qu·∫£ truy v·∫•n

    Args:
        results: Danh s√°ch k·∫øt qu·∫£ truy v·∫•n
        context: Ng·ªØ c·∫£nh b·ªï sung (th√¥ng tin kh√°ch h√†ng, l·ªãch s·ª≠ chat)

    Returns:
        Danh s√°ch k·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c l·ªçc
    """
    if not results:
        return []

    # L·∫•y ID kh√°ch h√†ng hi·ªán t·∫°i (n·∫øu c√≥)
    current_customer_id = None
    if context and 'customer_info' in context and context['customer_info']:
        current_customer_id = context['customer_info'].get('id')

    # X√°c ƒë·ªãnh lo·∫°i k·∫øt qu·∫£
    result_type = _determine_result_type(results)

    # N·∫øu l√† k·∫øt qu·∫£ v·ªÅ ƒë∆°n h√†ng ho·∫∑c kh√°ch h√†ng, ch·ªâ gi·ªØ l·∫°i th√¥ng tin c·ªßa kh√°ch h√†ng hi·ªán t·∫°i
    if result_type == "order" or "customer" in str(results).lower():
        filtered_results = []
        for result in results:
            # Ki·ªÉm tra c√°c tr∆∞·ªùng c√≥ th·ªÉ ch·ª©a ID kh√°ch h√†ng
            customer_id_fields = ["customer_id", "cus.id", "o.customer_id", "user_id"]

            # Ki·ªÉm tra xem k·∫øt qu·∫£ c√≥ thu·ªôc v·ªÅ kh√°ch h√†ng hi·ªán t·∫°i kh√¥ng
            is_current_customer = False

            for field in customer_id_fields:
                if field in result and result[field] is not None:
                    # N·∫øu c√≥ ID kh√°ch h√†ng hi·ªán t·∫°i v√† tr√πng kh·ªõp, gi·ªØ l·∫°i k·∫øt qu·∫£
                    if current_customer_id and str(result[field]) == str(current_customer_id):
                        is_current_customer = True
                        break

            # N·∫øu l√† kh√°ch h√†ng hi·ªán t·∫°i ho·∫∑c kh√¥ng c√≥ th√¥ng tin kh√°ch h√†ng trong k·∫øt qu·∫£, gi·ªØ l·∫°i
            if is_current_customer or not any(field in result for field in customer_id_fields):
                # Lo·∫°i b·ªè th√¥ng tin nh·∫°y c·∫£m c·ªßa kh√°ch h√†ng kh√°c
                filtered_result = result.copy()

                # Lo·∫°i b·ªè c√°c tr∆∞·ªùng nh·∫°y c·∫£m
                sensitive_fields = ["email", "phone", "address", "credit_card", "password", "face_embedding"]
                for field in sensitive_fields:
                    if field in filtered_result:
                        filtered_result[field] = "[REDACTED]"

                filtered_results.append(filtered_result)

        return filtered_results

    # ƒê·ªëi v·ªõi c√°c lo·∫°i k·∫øt qu·∫£ kh√°c, gi·ªØ nguy√™n
    return results


def _log_entity_ids(results: List[Dict]) -> None:
    """
    Log th√¥ng tin v·ªÅ k·∫øt qu·∫£ truy v·∫•n ƒë·ªÉ ƒë√°nh gi√° vi·ªác tr·∫£ l·ªùi

    Args:
        results: Danh s√°ch k·∫øt qu·∫£ truy v·∫•n
    """
    if not results:
        log_info("‚ùå Kh√¥ng c√≥ k·∫øt qu·∫£ ƒë·ªÉ log")
        return

    # Log s·ªë l∆∞·ª£ng k·∫øt qu·∫£
    log_info(f"üìä S·ªë l∆∞·ª£ng k·∫øt qu·∫£: {len(results)}")

    # Log th√¥ng tin v·ªÅ lo·∫°i k·∫øt qu·∫£
    result_types = set()
    for result in results:
        if "id" in result:
            # Chuy·ªÉn ƒë·ªïi ID th√†nh chu·ªói ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ th·ªÉ x·ª≠ l√Ω ƒë∆∞·ª£c
            result_id = str(result["id"])
            result_types.add(result_id.split("_")[0] if "_" in result_id else result_id)

    log_info(f"üìä Lo·∫°i k·∫øt qu·∫£: {', '.join(result_types) if result_types else 'Kh√¥ng x√°c ƒë·ªãnh'}")

    # Log th√¥ng tin v·ªÅ s·ªë l∆∞·ª£ng bi·∫øn th·ªÉ
    variant_count = 0
    for result in results:
        if "variant_details" in result:
            if isinstance(result["variant_details"], dict) and "variants" in result["variant_details"]:
                variant_count += len(result["variant_details"]["variants"])
            elif isinstance(result["variant_details"], list):
                variant_count += len(result["variant_details"])

    log_info(f"üìä S·ªë l∆∞·ª£ng bi·∫øn th·ªÉ: {variant_count}")

    # Log th√¥ng tin v·ªÅ s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
    product_count = 0
    for result in results:
        if "product_info" in result:
            if isinstance(result["product_info"], dict) and "products" in result["product_info"]:
                product_count += len(result["product_info"]["products"])
            elif isinstance(result["product_info"], list):
                product_count += len(result["product_info"])

    log_info(f"üìä S·ªë l∆∞·ª£ng s·∫£n ph·∫©m: {product_count}")

    # Log th√¥ng tin v·ªÅ ƒëi·ªÉm s·ªë
    scores = []
    for result in results:
        if "score" in result:
            scores.append(str(result["score"]))

    log_info(f"üìä ƒêi·ªÉm s·ªë: {', '.join(scores) if scores else 'Kh√¥ng c√≥'}")

def _determine_result_type(results: List[Dict]) -> Literal["product", "store", "order", "unknown"]:
    """
    X√°c ƒë·ªãnh lo·∫°i k·∫øt qu·∫£ d·ª±a tr√™n c√°c tr∆∞·ªùng trong k·∫øt qu·∫£

    Args:
        results: Danh s√°ch k·∫øt qu·∫£ truy v·∫•n

    Returns:
        Lo·∫°i k·∫øt qu·∫£: "product", "store", "order", ho·∫∑c "unknown"
    """
    if not results:
        return "unknown"

    # L·∫•y k·∫øt qu·∫£ ƒë·∫ßu ti√™n ƒë·ªÉ ki·ªÉm tra
    first_result = results[0]

    # Ki·ªÉm tra c√°c tr∆∞·ªùng ƒë·∫∑c tr∆∞ng c·ªßa s·∫£n ph·∫©m
    product_fields = ["name_product", "p.name_product", "descriptions", "p.descriptions",
                     "Beverage_Option", "v.Beverage_Option", "caffeine_mg", "v.caffeine_mg"]

    # Ki·ªÉm tra c√°c tr∆∞·ªùng ƒë·∫∑c tr∆∞ng c·ªßa c·ª≠a h√†ng
    store_fields = ["name_store", "s.name_store", "address", "s.address", "phone", "s.phone", "open_close", "s.open_close"]

    # Ki·ªÉm tra c√°c tr∆∞·ªùng ƒë·∫∑c tr∆∞ng c·ªßa ƒë∆°n h√†ng
    order_fields = ["order_date", "o.order_date", "order_id", "o.id", "customer_id", "o.customer_id"]

    # ƒê·∫øm s·ªë tr∆∞·ªùng kh·ªõp cho m·ªói lo·∫°i
    product_matches = sum(1 for field in product_fields if field in first_result)
    store_matches = sum(1 for field in store_fields if field in first_result)
    order_matches = sum(1 for field in order_fields if field in first_result)

    # X√°c ƒë·ªãnh lo·∫°i d·ª±a tr√™n s·ªë tr∆∞·ªùng kh·ªõp nhi·ªÅu nh·∫•t
    if product_matches >= store_matches and product_matches >= order_matches:
        return "product"
    elif store_matches >= product_matches and store_matches >= order_matches:
        return "store"
    elif order_matches >= product_matches and order_matches >= store_matches:
        return "order"
    else:
        return "unknown"


def _organize_variants_by_product_and_category(results: List[Dict]) -> Dict[str, Dict]:
    """
    T·ªïng h·ª£p c√°c bi·∫øn th·ªÉ theo s·∫£n ph·∫©m v√† danh m·ª•c

    Args:
        results: Danh s√°ch k·∫øt qu·∫£ truy v·∫•n

    Returns:
        Dict: Th√¥ng tin t·ªïng h·ª£p v·ªÅ c√°c bi·∫øn th·ªÉ theo s·∫£n ph·∫©m v√† danh m·ª•c
    """
    # Log th√¥ng tin v·ªÅ k·∫øt qu·∫£ ƒë·∫ßu v√†o
    log_info(f"B·∫Øt ƒë·∫ßu t·ªï ch·ª©c d·ªØ li·ªáu v·ªõi {len(results)} k·∫øt qu·∫£")
    if results:
        log_info(f"C·∫•u tr√∫c k·∫øt qu·∫£ ƒë·∫ßu ti√™n: {list(results[0].keys())}")

    # T·∫°o dictionary ƒë·ªÉ l∆∞u tr·ªØ th√¥ng tin
    organized_data = {
        "by_category": {},  # T·ªï ch·ª©c theo danh m·ª•c
        "by_product": {},   # T·ªï ch·ª©c theo s·∫£n ph·∫©m
        "all_variants": [], # Danh s√°ch t·∫•t c·∫£ c√°c bi·∫øn th·ªÉ
        "statistics": {     # Th·ªëng k√™
            "total_categories": 0,
            "total_products": 0,
            "total_variants": 0,
            "products_by_category": {},
            "variants_by_product": {},
            "sorted_products": [],
            "top_products": []
        }
    }

    # Ki·ªÉm tra xem k·∫øt qu·∫£ c√≥ ph·∫£i l√† k·∫øt qu·∫£ g·ªëc t·ª´ Neo4j kh√¥ng
    if results and all(isinstance(result, dict) and "category_id" in result and "product_id" in result and "category_name" in result and "product_name" in result for result in results):
        log_info("Ph√°t hi·ªán k·∫øt qu·∫£ g·ªëc t·ª´ Neo4j, x·ª≠ l√Ω theo ƒë·ªãnh d·∫°ng g·ªëc")

        # Duy·ªát qua t·ª´ng k·∫øt qu·∫£
        for result in results:
            # L·∫•y th√¥ng tin t·ª´ k·∫øt qu·∫£
            category_id = result.get("category_id")
            category_name = result.get("category_name")
            category_description = result.get("category_description", "")
            product_id = result.get("product_id")
            product_name = result.get("product_name")
            product_description = result.get("product_description", "")

            # T·∫°o key cho danh m·ª•c v√† s·∫£n ph·∫©m
            category_key = f"{category_id}_{category_name}"
            product_key = f"{product_id}_{product_name}"

            # N·∫øu danh m·ª•c ch∆∞a c√≥ trong dictionary, th√™m v√†o
            if category_key not in organized_data["by_category"]:
                organized_data["by_category"][category_key] = {
                    "id": category_id,
                    "name": category_name,
                    "description": category_description,
                    "products": {},
                    "variants": []
                }
                # C·∫≠p nh·∫≠t th·ªëng k√™
                organized_data["statistics"]["total_categories"] += 1
                organized_data["statistics"]["products_by_category"][category_key] = 0

            # N·∫øu s·∫£n ph·∫©m ch∆∞a c√≥ trong dictionary c·ªßa danh m·ª•c, th√™m v√†o
            if product_key not in organized_data["by_category"][category_key]["products"]:
                organized_data["by_category"][category_key]["products"][product_key] = {
                    "id": product_id,
                    "name": product_name,
                    "description": product_description,
                    "variants": []
                }

            # N·∫øu s·∫£n ph·∫©m ch∆∞a c√≥ trong dictionary ch√≠nh, th√™m v√†o
            if product_key not in organized_data["by_product"]:
                organized_data["by_product"][product_key] = {
                    "id": product_id,
                    "name": product_name,
                    "description": product_description,
                    "category_id": category_id,
                    "category_name": category_name,
                    "variants": []
                }
                # C·∫≠p nh·∫≠t th·ªëng k√™
                organized_data["statistics"]["total_products"] += 1
                organized_data["statistics"]["variants_by_product"][product_key] = 0
                organized_data["statistics"]["products_by_category"][category_key] += 1

            # Ki·ªÉm tra xem k·∫øt qu·∫£ c√≥ ch·ª©a th√¥ng tin v·ªÅ bi·∫øn th·ªÉ kh√¥ng
            if "variant_id" in result:
                # L·∫•y th√¥ng tin v·ªÅ bi·∫øn th·ªÉ - ƒê·∫¶Y ƒê·ª¶ T·∫§T C·∫¢ THU·ªòC T√çNH
                variant_id = result.get("variant_id")
                beverage_option = result.get("beverage_option")
                price = result.get("price")

                # S·ª≠ d·ª•ng t√™n field ch√≠nh x√°c t·ª´ database
                sugars_g = result.get("sugars_g")
                caffeine_mg = result.get("caffeine_mg")
                calories = result.get("calories")
                sales_rank = result.get("sales_rank")
                protein_g = result.get("protein_g")

                # Th√™m c√°c thu·ªôc t√≠nh b·ªã thi·∫øu
                dietary_fibre_g = result.get("dietary_fibre_g")
                vitamin_a = result.get("vitamin_a")
                vitamin_c = result.get("vitamin_c")
                variant_name = result.get("variant_name")
                variant_product_id = result.get("variant_product_id")
                variant_product_name = result.get("variant_product_name")
                target_value = result.get("target_value")

                # T·∫°o ƒë·ªëi t∆∞·ª£ng bi·∫øn th·ªÉ v·ªõi ƒê·∫¶Y ƒê·ª¶ thu·ªôc t√≠nh (12 thu·ªôc t√≠nh ch√≠nh)
                variant = {
                    "id": variant_id,                           # 1. ID variant
                    "variant_name": variant_name,
                    "beverage_option": beverage_option,         # 2. Beverage Option
                    "price": price,                             # 3. Price
                    "sugars_g": sugars_g,                       # 4. Sugars_g
                    "caffeine_mg": caffeine_mg,                 # 5. Caffeine_mg
                    "calories": calories,                       # 6. Calories
                    "protein_g": protein_g,                     # 7. Protein_g
                    "dietary_fibre_g": dietary_fibre_g,         # 8. Dietary_fibre_g
                    "vitamin_a": vitamin_a,                     # 9. Vitamin_a
                    "vitamin_c": vitamin_c,                     # 10. Vitamin_c
                    "sales_rank": sales_rank,                   # 11. Sales_rank
                    "product_id": result.get("product_id"),     # 12. Product_id (th√™m m·ªõi)
                    "variant_product_id": variant_product_id,
                    "variant_product_name": variant_product_name,
                    "target_value": target_value
                }

                # Th√™m bi·∫øn th·ªÉ v√†o s·∫£n ph·∫©m trong dictionary ch√≠nh
                organized_data["by_product"][product_key]["variants"].append(variant)

                # Th√™m bi·∫øn th·ªÉ v√†o s·∫£n ph·∫©m trong dictionary c·ªßa danh m·ª•c
                organized_data["by_category"][category_key]["products"][product_key]["variants"].append(variant)

                # Th√™m bi·∫øn th·ªÉ v√†o danh s√°ch t·∫•t c·∫£ c√°c bi·∫øn th·ªÉ
                variant_with_product_info = variant.copy()
                variant_with_product_info["product_id"] = product_id
                variant_with_product_info["product_name"] = product_name
                variant_with_product_info["category_id"] = category_id
                variant_with_product_info["category_name"] = category_name
                organized_data["all_variants"].append(variant_with_product_info)

                # C·∫≠p nh·∫≠t th·ªëng k√™
                organized_data["statistics"]["total_variants"] += 1
                organized_data["statistics"]["variants_by_product"][product_key] += 1

        return organized_data

    # Duy·ªát qua t·ª´ng k·∫øt qu·∫£
    for result in results:
        # Ki·ªÉm tra xem k·∫øt qu·∫£ c√≥ ph·∫£i l√† danh m·ª•c kh√¥ng
        if "id" in result and "name" in result and "products" in result:
            # ƒê√¢y l√† k·∫øt qu·∫£ danh m·ª•c t·ª´ GraphRAG agent
            category_id = result["id"]
            category_name = result["name"]
            category_description = result.get("description", "")
            category_description = result.get("category_description", category_description)  # Th·ª≠ l·∫•y t·ª´ category_description n·∫øu c√≥
            products = result.get("products", [])

            # Log th√¥ng tin danh m·ª•c
            log_info(f"X·ª≠ l√Ω danh m·ª•c: {category_name} (ID: {category_id})")
            if category_description:
                log_info(f"M√¥ t·∫£ danh m·ª•c: {category_description[:100]}...")

            # T·∫°o key cho danh m·ª•c
            category_key = f"{category_id}_{category_name}"

            # N·∫øu danh m·ª•c ch∆∞a c√≥ trong dictionary, th√™m v√†o
            if category_key not in organized_data["by_category"]:
                organized_data["by_category"][category_key] = {
                    "id": category_id,
                    "name": category_name,
                    "description": category_description,
                    "products": {},
                    "variants": []
                }

            # Th√™m s·∫£n ph·∫©m v√†o danh m·ª•c
            for product in products:
                product_id = product.get("id")
                product_name = product.get("name")

                if product_id and product_name:
                    # T·∫°o key cho s·∫£n ph·∫©m
                    product_key = f"{product_id}_{product_name}"

                    # N·∫øu s·∫£n ph·∫©m ch∆∞a c√≥ trong dictionary c·ªßa danh m·ª•c, th√™m v√†o
                    if product_key not in organized_data["by_category"][category_key]["products"]:
                        # S·ª≠ d·ª•ng m√¥ t·∫£ danh m·ª•c n·∫øu kh√¥ng c√≥ m√¥ t·∫£ s·∫£n ph·∫©m
                        product_description = product.get("description")
                        if product_description is None and category_description:
                            product_description = category_description
                            log_info(f"S·ª≠ d·ª•ng m√¥ t·∫£ danh m·ª•c cho s·∫£n ph·∫©m {product_name} (ID: {product_id}) trong danh m·ª•c")

                        organized_data["by_category"][category_key]["products"][product_key] = {
                            "id": product_id,
                            "name": product_name,
                            "description": product_description,
                            "variants": []
                        }

                    # N·∫øu s·∫£n ph·∫©m ch∆∞a c√≥ trong dictionary ch√≠nh, th√™m v√†o
                    if product_key not in organized_data["by_product"]:
                        organized_data["by_product"][product_key] = {
                            "id": product_id,
                            "name": product_name,
                            "description": product_description,
                            "category_id": category_id,
                            "category_name": category_name,
                            "category_description": category_description,
                            "variants": []
                        }

            continue

        # Ki·ªÉm tra xem k·∫øt qu·∫£ c√≥ ph·∫£i l√† s·∫£n ph·∫©m v·ªõi bi·∫øn th·ªÉ kh√¥ng
        if "id" in result and "name" in result and "category_id" in result and "category_name" in result:
            # ƒê√¢y l√† k·∫øt qu·∫£ s·∫£n ph·∫©m t·ª´ GraphRAG agent
            product_id = result["id"]
            product_name = result["name"]
            category_id = result["category_id"]
            category_name = result["category_name"]
            category_description = result.get("category_description", "")
            product_description = result.get("product_description")

            # S·ª≠ d·ª•ng m√¥ t·∫£ danh m·ª•c n·∫øu kh√¥ng c√≥ m√¥ t·∫£ s·∫£n ph·∫©m
            if product_description is None and category_description:
                product_description = category_description
                log_info(f"S·ª≠ d·ª•ng m√¥ t·∫£ danh m·ª•c cho s·∫£n ph·∫©m {product_name} (ID: {product_id})")

            # Log th√¥ng tin s·∫£n ph·∫©m
            log_info(f"X·ª≠ l√Ω s·∫£n ph·∫©m: {product_name} (ID: {product_id}) t·ª´ danh m·ª•c: {category_name} (ID: {category_id})")
            if product_description:
                log_info(f"M√¥ t·∫£ s·∫£n ph·∫©m: {product_description[:100]}...")

            # L·∫•y bi·∫øn th·ªÉ n·∫øu c√≥
            variants = []
            if "variants" in result:
                variants = result["variants"]
                log_info(f"S·∫£n ph·∫©m c√≥ {len(variants)} bi·∫øn th·ªÉ")

            # T·∫°o key cho danh m·ª•c v√† s·∫£n ph·∫©m
            category_key = f"{category_id}_{category_name}"
            product_key = f"{product_id}_{product_name}"

            # N·∫øu danh m·ª•c ch∆∞a c√≥ trong dictionary, th√™m v√†o
            if category_key not in organized_data["by_category"]:
                organized_data["by_category"][category_key] = {
                    "id": category_id,
                    "name": category_name,
                    "description": category_description,
                    "products": {},
                    "variants": []
                }

            # N·∫øu s·∫£n ph·∫©m ch∆∞a c√≥ trong dictionary c·ªßa danh m·ª•c, th√™m v√†o
            if product_key not in organized_data["by_category"][category_key]["products"]:
                organized_data["by_category"][category_key]["products"][product_key] = {
                    "id": product_id,
                    "name": product_name,
                    "variants": []
                }

            # N·∫øu s·∫£n ph·∫©m ch∆∞a c√≥ trong dictionary ch√≠nh, th√™m v√†o
            if product_key not in organized_data["by_product"]:
                organized_data["by_product"][product_key] = {
                    "id": product_id,
                    "name": product_name,
                    "description": product_description,
                    "category_id": category_id,
                    "category_name": category_name,
                    "category_description": category_description,
                    "variants": []
                }

            # Th√™m c√°c bi·∫øn th·ªÉ v√†o s·∫£n ph·∫©m
            for variant in variants:
                # Chu·∫©n h√≥a t√™n thu·ªôc t√≠nh
                normalized_variant = {}
                for key, value in variant.items():
                    if key.lower() == "name":
                        normalized_variant["beverage_option"] = value
                    elif key.lower() == "price":
                        normalized_variant["price"] = value
                    elif key.lower() == "sugar":
                        normalized_variant["sugars_g"] = value
                    elif key.lower() == "caffeine":
                        normalized_variant["caffeine_mg"] = value
                    elif key.lower() == "calories":
                        normalized_variant["calories"] = value
                    elif key.lower() == "id":
                        normalized_variant["variant_id"] = value
                    else:
                        normalized_variant[key] = value

                # Th√™m bi·∫øn th·ªÉ v√†o s·∫£n ph·∫©m trong dictionary ch√≠nh
                organized_data["by_product"][product_key]["variants"].append(normalized_variant)

                # Th√™m bi·∫øn th·ªÉ v√†o s·∫£n ph·∫©m trong dictionary c·ªßa danh m·ª•c
                organized_data["by_category"][category_key]["products"][product_key]["variants"].append(normalized_variant)

                # Th√™m bi·∫øn th·ªÉ v√†o danh s√°ch t·∫•t c·∫£ c√°c bi·∫øn th·ªÉ
                variant_with_product_info = normalized_variant.copy()
                variant_with_product_info["product_id"] = product_id
                variant_with_product_info["product_name"] = product_name
                variant_with_product_info["category_id"] = category_id
                variant_with_product_info["category_name"] = category_name
                organized_data["all_variants"].append(variant_with_product_info)

            # Log th√¥ng tin v·ªÅ c√°c bi·∫øn th·ªÉ
            log_info(f"ƒê√£ t√¨m th·∫•y {len(variants)} bi·∫øn th·ªÉ trong k·∫øt qu·∫£")
            if variants:
                log_info(f"Bi·∫øn th·ªÉ ƒë·∫ßu ti√™n: {json.dumps(variants[0], ensure_ascii=False)}")

            continue

        # X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p kh√°c (c·∫•u tr√∫c d·ªØ li·ªáu c≈©)
        variants = []

        # Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu t·ª´ GraphRAG agent
        if "variants" in result:
            # C·∫•u tr√∫c d·ªØ li·ªáu m·ªõi t·ª´ GraphRAG agent
            variants = result["variants"]
        elif "variant_details" in result:
            # C·∫•u tr√∫c d·ªØ li·ªáu c≈©
            if isinstance(result["variant_details"], dict) and "variants" in result["variant_details"]:
                variants = result["variant_details"]["variants"]
            elif isinstance(result["variant_details"], list):
                variants = result["variant_details"]

        # Log th√¥ng tin v·ªÅ c√°c bi·∫øn th·ªÉ
        log_info(f"ƒê√£ t√¨m th·∫•y {len(variants)} bi·∫øn th·ªÉ trong k·∫øt qu·∫£")
        if variants:
            log_info(f"Bi·∫øn th·ªÉ ƒë·∫ßu ti√™n: {json.dumps(variants[0], ensure_ascii=False)}")

        # L·∫•y th√¥ng tin v·ªÅ t·∫•t c·∫£ c√°c bi·∫øn th·ªÉ
        all_variants = []
        if "all_variants" in result:
            all_variants = result["all_variants"]

        # Duy·ªát qua t·ª´ng bi·∫øn th·ªÉ trong variants
        for variant in variants:
            # Chu·∫©n h√≥a t√™n thu·ªôc t√≠nh
            normalized_variant = {}
            for key, value in variant.items():
                # X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát
                if key.lower() == "name" or key.lower() == "beverage_option" or key.lower() == "beverage_optioon":
                    normalized_variant["beverage_option"] = value
                elif key.lower() == "price":
                    normalized_variant["price"] = value
                elif key.lower() == "sugar" or key.lower() == "sugars_g":
                    normalized_variant["sugars_g"] = value
                elif key.lower() == "caffeine" or key.lower() == "caffeine_mg":
                    normalized_variant["caffeine_mg"] = value
                elif key.lower() == "calories":
                    normalized_variant["calories"] = value
                elif key.lower() == "id" or key.lower() == "variant_id":
                    normalized_variant["variant_id"] = value
                elif key.lower() == "protein" or key.lower() == "protein_g":
                    normalized_variant["protein_g"] = value
                elif key.lower() == "sales_rank":
                    normalized_variant["sales_rank"] = value
                else:
                    normalized_variant[key] = value

            # Log th√¥ng tin v·ªÅ bi·∫øn th·ªÉ ƒë√£ chu·∫©n h√≥a
            log_info(f"Bi·∫øn th·ªÉ ƒë√£ chu·∫©n h√≥a: {json.dumps(normalized_variant, ensure_ascii=False)[:100]}...")

            # Th√™m v√†o danh s√°ch t·∫•t c·∫£ c√°c bi·∫øn th·ªÉ
            organized_data["all_variants"].append(normalized_variant)

            # L·∫•y th√¥ng tin v·ªÅ danh m·ª•c
            category_id = variant.get("category_id")
            category_name = variant.get("category_name")

            if category_id and category_name:
                # T·∫°o key cho danh m·ª•c
                category_key = f"{category_id}_{category_name}"

                # N·∫øu danh m·ª•c ch∆∞a c√≥ trong dictionary, th√™m v√†o
                if category_key not in organized_data["by_category"]:
                    organized_data["by_category"][category_key] = {
                        "id": category_id,
                        "name": category_name,
                        "products": {},
                        "variants": []
                    }

                # Th√™m bi·∫øn th·ªÉ v√†o danh s√°ch bi·∫øn th·ªÉ c·ªßa danh m·ª•c
                organized_data["by_category"][category_key]["variants"].append(normalized_variant)

                # L·∫•y th√¥ng tin v·ªÅ s·∫£n ph·∫©m
                product_id = variant.get("product_id")
                product_name = variant.get("product_name")

                if product_id and product_name:
                    # T·∫°o key cho s·∫£n ph·∫©m
                    product_key = f"{product_id}_{product_name}"

                    # N·∫øu s·∫£n ph·∫©m ch∆∞a c√≥ trong dictionary c·ªßa danh m·ª•c, th√™m v√†o
                    if product_key not in organized_data["by_category"][category_key]["products"]:
                        organized_data["by_category"][category_key]["products"][product_key] = {
                            "id": product_id,
                            "name": product_name,
                            "variants": []
                        }

                    # Th√™m bi·∫øn th·ªÉ v√†o danh s√°ch bi·∫øn th·ªÉ c·ªßa s·∫£n ph·∫©m trong danh m·ª•c
                    organized_data["by_category"][category_key]["products"][product_key]["variants"].append(normalized_variant)

                    # N·∫øu s·∫£n ph·∫©m ch∆∞a c√≥ trong dictionary ch√≠nh, th√™m v√†o
                    if product_key not in organized_data["by_product"]:
                        organized_data["by_product"][product_key] = {
                            "id": product_id,
                            "name": product_name,
                            "category_id": category_id,
                            "category_name": category_name,
                            "variants": []
                        }

                    # Th√™m bi·∫øn th·ªÉ v√†o danh s√°ch bi·∫øn th·ªÉ c·ªßa s·∫£n ph·∫©m
                    organized_data["by_product"][product_key]["variants"].append(normalized_variant)

        # Duy·ªát qua t·ª´ng bi·∫øn th·ªÉ trong all_variants
        for variant in all_variants:
            # Ki·ªÉm tra xem bi·∫øn th·ªÉ ƒë√£ c√≥ trong danh s√°ch t·∫•t c·∫£ c√°c bi·∫øn th·ªÉ ch∆∞a
            variant_id = variant.get("variant_id")
            if variant_id and not any(v.get("variant_id") == variant_id for v in organized_data["all_variants"]):
                # Th√™m v√†o danh s√°ch t·∫•t c·∫£ c√°c bi·∫øn th·ªÉ
                organized_data["all_variants"].append(variant)

    # T√≠nh to√°n s·ªë l∆∞·ª£ng bi·∫øn th·ªÉ cho m·ªói s·∫£n ph·∫©m
    for product_key, product_info in organized_data["by_product"].items():
        variant_count = len(product_info.get("variants", []))
        organized_data["statistics"]["variants_by_product"][product_key] = variant_count
        organized_data["statistics"]["total_variants"] += variant_count

        # C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
        if product_key not in organized_data["statistics"]["products_by_category"]:
            organized_data["statistics"]["total_products"] += 1

            # C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m theo danh m·ª•c
            category_id = product_info.get("category_id")
            category_name = product_info.get("category_name")
            if category_id and category_name:
                category_key = f"{category_id}_{category_name}"
                if category_key not in organized_data["statistics"]["products_by_category"]:
                    organized_data["statistics"]["products_by_category"][category_key] = 0
                    organized_data["statistics"]["total_categories"] += 1
                organized_data["statistics"]["products_by_category"][category_key] += 1

    # Th·ªëng k√™ v√† s·∫Øp x·∫øp c√°c s·∫£n ph·∫©m theo s·ªë l∆∞·ª£ng bi·∫øn th·ªÉ v√† x·∫øp h·∫°ng b√°n ch·∫°y
    product_stats = []
    for product_key, product_info in organized_data["by_product"].items():
        # T√≠nh ƒëi·ªÉm trung b√¨nh c·ªßa x·∫øp h·∫°ng b√°n ch·∫°y
        avg_sales_rank = 0
        total_variants = len(product_info.get("variants", []))
        if total_variants > 0:
            sum_sales_rank = sum(variant.get("sales_rank", 999) for variant in product_info.get("variants", []))
            avg_sales_rank = sum_sales_rank / total_variants

        product_stats.append({
            "key": product_key,
            "id": product_info.get("id", "Unknown"),
            "name": product_info.get("name", "Unknown"),
            "category_id": product_info.get("category_id", "Unknown"),
            "category_name": product_info.get("category_name", "Unknown"),
            "variant_count": total_variants,
            "avg_sales_rank": avg_sales_rank,
            "info": product_info
        })

    # Nh√≥m s·∫£n ph·∫©m theo danh m·ª•c
    products_by_category = {}
    for product in product_stats:
        category_id = product["category_id"]
        if category_id not in products_by_category:
            products_by_category[category_id] = []
        products_by_category[category_id].append(product)

    # S·∫Øp x·∫øp s·∫£n ph·∫©m trong m·ªói danh m·ª•c theo x·∫øp h·∫°ng b√°n ch·∫°y v√† s·ªë l∆∞·ª£ng bi·∫øn th·ªÉ
    for category_id, products in products_by_category.items():
        products_by_category[category_id] = sorted(
            products,
            key=lambda x: (x["avg_sales_rank"], -x["variant_count"])
        )

    # Ch·ªçn ra t·ªëi ƒëa 3 s·∫£n ph·∫©m t·ª´ m·ªói danh m·ª•c
    diverse_products = []
    for category_id, products in products_by_category.items():
        diverse_products.extend(products[:3])

    # S·∫Øp x·∫øp l·∫°i theo x·∫øp h·∫°ng b√°n ch·∫°y
    diverse_products.sort(key=lambda x: x["avg_sales_rank"])

    # L∆∞u tr·ªØ th√¥ng tin s·∫£n ph·∫©m ƒë√£ s·∫Øp x·∫øp
    organized_data["statistics"]["sorted_products"] = diverse_products

    # Ch·ªçn ra 3 s·∫£n ph·∫©m h√†ng ƒë·∫ßu t·ª´ danh s√°ch ƒëa d·∫°ng
    top_products = diverse_products[:3]
    organized_data["statistics"]["top_products"] = top_products

    # Log th√¥ng tin th·ªëng k√™
    log_info(f"Th·ªëng k√™: {organized_data['statistics']['total_categories']} danh m·ª•c, {organized_data['statistics']['total_products']} s·∫£n ph·∫©m, {organized_data['statistics']['total_variants']} bi·∫øn th·ªÉ")
    if top_products:
        log_info(f"Top 3 s·∫£n ph·∫©m: {', '.join([p['name'] for p in top_products])}")
    else:
        log_info("Kh√¥ng c√≥ s·∫£n ph·∫©m h√†ng ƒë·∫ßu")

    return organized_data


def _format_organized_data_for_llm(organized_data: Dict[str, Dict], max_products: int = 3) -> str:
    """
    ƒê·ªãnh d·∫°ng d·ªØ li·ªáu ƒë√£ t·ªï ch·ª©c ƒë·ªÉ truy·ªÅn cho LLM

    Args:
        organized_data: D·ªØ li·ªáu ƒë√£ t·ªï ch·ª©c
        max_products: S·ªë l∆∞·ª£ng s·∫£n ph·∫©m t·ªëi ƒëa ƒë·ªÉ hi·ªÉn th·ªã trong ph·∫ßn ch√≠nh

    Returns:
        str: D·ªØ li·ªáu ƒë√£ ƒë·ªãnh d·∫°ng
    """
    # Log th√¥ng tin v·ªÅ d·ªØ li·ªáu ƒë√£ t·ªï ch·ª©c
    log_info(f"ƒê·ªãnh d·∫°ng d·ªØ li·ªáu v·ªõi {len(organized_data['by_product'])} s·∫£n ph·∫©m v√† {len(organized_data['by_category'])} danh m·ª•c")
    log_info(f"Th·ªëng k√™: {organized_data['statistics']['total_categories']} danh m·ª•c, {organized_data['statistics']['total_products']} s·∫£n ph·∫©m, {organized_data['statistics']['total_variants']} bi·∫øn th·ªÉ")

    # Ki·ªÉm tra xem c√≥ s·∫£n ph·∫©m n√†o kh√¥ng
    if not organized_data["by_product"]:
        # Ki·ªÉm tra xem c√≥ danh m·ª•c n√†o kh√¥ng
        if organized_data["by_category"]:
            result = "TH√îNG TIN DANH M·ª§C V√Ä S·∫¢N PH·∫®M LI√äN QUAN:\n\n"

            # Hi·ªÉn th·ªã th√¥ng tin danh m·ª•c tr∆∞·ªõc
            for category_key, category_info in organized_data["by_category"].items():
                result += f"üìÇ **DANH M·ª§C: {category_info['name']}**\n"

                # Th√™m m√¥ t·∫£ danh m·ª•c n·∫øu c√≥
                if "description" in category_info and category_info["description"]:
                    result += f"M√¥ t·∫£ danh m·ª•c: {category_info['description']}\n"

                # Th√™m s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong danh m·ª•c
                product_count = len(category_info["products"]) if category_info["products"] else 0
                result += f"S·ªë l∆∞·ª£ng s·∫£n ph·∫©m: {product_count}\n\n"

                # Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m trong danh m·ª•c
                if category_info["products"]:
                    result += "üìã **C√ÅC S·∫¢N PH·∫®M TRONG DANH M·ª§C:**\n"
                    for i, (product_key, product_info) in enumerate(category_info["products"].items(), 1):
                        result += f"{i}. **{product_info['name']}**\n"

                        # Th√™m m√¥ t·∫£ s·∫£n ph·∫©m n·∫øu c√≥ v√† kh√°c v·ªõi m√¥ t·∫£ danh m·ª•c
                        if "description" in product_info and product_info["description"]:
                            # Ki·ªÉm tra xem m√¥ t·∫£ s·∫£n ph·∫©m c√≥ gi·ªëng v·ªõi m√¥ t·∫£ danh m·ª•c kh√¥ng
                            category_desc = category_info.get("description", "")
                            if product_info["description"] != category_desc and product_info["description"].strip():
                                # C·∫Øt b·ªõt m√¥ t·∫£ n·∫øu qu√° d√†i v√† lo·∫°i b·ªè ph·∫ßn l·∫∑p l·∫°i
                                product_desc = product_info["description"].strip()
                                # T√¨m v√† lo·∫°i b·ªè ph·∫ßn l·∫∑p l·∫°i
                                if len(product_desc) > 200:
                                    # T√¨m v·ªã tr√≠ c√≥ th·ªÉ c·∫Øt (d·∫•u ch·∫•m ho·∫∑c d·∫•u ph·∫©y)
                                    cut_pos = product_desc.find('.', 150)
                                    if cut_pos == -1:
                                        cut_pos = product_desc.find(',', 150)
                                    if cut_pos != -1:
                                        product_desc = product_desc[:cut_pos + 1]
                                    else:
                                        product_desc = product_desc[:200] + "..."

                                result += f"   M√¥ t·∫£: {product_desc}\n"

                        result += "\n"

                result += "‚îÄ" * 50 + "\n\n"

            return result
        else:
            return "TH√îNG TIN S·∫¢N PH·∫®M CH√çNH:\n\nKh√¥ng c√≥ th√¥ng tin s·∫£n ph·∫©m n√†o.\n\nDANH S√ÅCH S·∫¢N PH·∫®M G·ª¢I √ù:\n\nKh√¥ng c√≥ s·∫£n ph·∫©m n√†o ƒë∆∞·ª£c g·ª£i √Ω."

    # S·ª≠ d·ª•ng th√¥ng tin th·ªëng k√™ ƒë√£ c√≥
    if "statistics" in organized_data and "sorted_products" in organized_data["statistics"] and organized_data["statistics"]["sorted_products"]:
        # S·ª≠ d·ª•ng danh s√°ch s·∫£n ph·∫©m ƒë√£ s·∫Øp x·∫øp t·ª´ th·ªëng k√™
        all_products = organized_data["statistics"]["sorted_products"]

        # L·∫•y t·ªëi ƒëa 3 s·∫£n ph·∫©m cho ph·∫ßn ch√≠nh
        top_products = all_products[:3]

        # L·∫•y c√°c s·∫£n ph·∫©m c√≤n l·∫°i cho ph·∫ßn g·ª£i √Ω (ch·ªâ khi c√≥ nhi·ªÅu h∆°n 3 s·∫£n ph·∫©m)
        remaining_products = all_products[3:] if len(all_products) > 3 else []

        # Log th√¥ng tin
        log_info(f"T·ªïng s·ªë s·∫£n ph·∫©m: {len(all_products)}")
        log_info(f"S·∫£n ph·∫©m ch√≠nh: {len(top_products)}")
        log_info(f"S·∫£n ph·∫©m g·ª£i √Ω: {len(remaining_products)}")

        if len(all_products) <= 3:
            log_info("S·ªë l∆∞·ª£ng s·∫£n ph·∫©m <= 3, kh√¥ng t·∫°o ph·∫ßn g·ª£i √Ω")
    else:
        # T·∫°o danh s√°ch s·∫£n ph·∫©m ƒë√£ s·∫Øp x·∫øp theo x·∫øp h·∫°ng b√°n ch·∫°y (ph∆∞∆°ng ph√°p c≈©)
        sorted_products = []
        for product_key, product_info in organized_data["by_product"].items():
            # T√≠nh ƒëi·ªÉm trung b√¨nh c·ªßa x·∫øp h·∫°ng b√°n ch·∫°y
            avg_sales_rank = 0
            total_variants = len(product_info["variants"])
            if total_variants > 0:
                sum_sales_rank = sum(variant.get("sales_rank", 999) for variant in product_info["variants"])
                avg_sales_rank = sum_sales_rank / total_variants
            else:
                # N·∫øu kh√¥ng c√≥ bi·∫øn th·ªÉ, s·ª≠ d·ª•ng gi√° tr·ªã m·∫∑c ƒë·ªãnh
                avg_sales_rank = 500  # Gi√° tr·ªã trung b√¨nh

            sorted_products.append({
                "key": product_key,
                "id": product_info.get("id", "Unknown"),
                "name": product_info.get("name", "Unknown"),
                "info": product_info,
                "avg_sales_rank": avg_sales_rank
            })

        # S·∫Øp x·∫øp s·∫£n ph·∫©m theo x·∫øp h·∫°ng b√°n ch·∫°y (th·∫•p h∆°n = t·ªët h∆°n)
        sorted_products.sort(key=lambda x: x["avg_sales_rank"])

        # L·∫•y t·ªëi ƒëa 3 s·∫£n ph·∫©m cho ph·∫ßn ch√≠nh
        top_products = sorted_products[:3]

        # L·∫•y c√°c s·∫£n ph·∫©m c√≤n l·∫°i cho ph·∫ßn g·ª£i √Ω (ch·ªâ khi c√≥ nhi·ªÅu h∆°n 3 s·∫£n ph·∫©m)
        remaining_products = sorted_products[3:] if len(sorted_products) > 3 else []

        # Log th√¥ng tin
        log_info(f"S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p c≈©: {len(sorted_products)} s·∫£n ph·∫©m")
        log_info(f"S·∫£n ph·∫©m ch√≠nh: {len(top_products)}")
        log_info(f"S·∫£n ph·∫©m g·ª£i √Ω: {len(remaining_products)}")

        if len(sorted_products) <= 3:
            log_info("S·ªë l∆∞·ª£ng s·∫£n ph·∫©m <= 3, kh√¥ng t·∫°o ph·∫ßn g·ª£i √Ω")

    # Ki·ªÉm tra xem c√≥ bi·∫øn th·ªÉ n√†o kh√¥ng
    has_variants = False

    # Ki·ªÉm tra top_products tr∆∞·ªõc
    for product in top_products:
        if product["info"]["variants"]:
            has_variants = True
            break

    # N·∫øu kh√¥ng t√¨m th·∫•y trong top_products, ki·ªÉm tra remaining_products
    if not has_variants and remaining_products:
        for product in remaining_products:
            if product["info"]["variants"]:
                has_variants = True
                break

    # T·∫°o chu·ªói k·∫øt qu·∫£ d·ª±a tr√™n lo·∫°i d·ªØ li·ªáu
    if has_variants:
        result = "TH√îNG TIN S·∫¢N PH·∫®M V√Ä BI·∫æN TH·ªÇ LI√äN QUAN:\n\n"
    else:
        result = "TH√îNG TIN S·∫¢N PH·∫®M LI√äN QUAN:\n\n"

    # T·∫°o m·ªôt t·ª´ ƒëi·ªÉn ƒë·ªÉ l∆∞u tr·ªØ c√°c bi·∫øn th·ªÉ ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
    processed_variants = set()

    # T·∫°o m·ªôt t·∫≠p h·ª£p ƒë·ªÉ l∆∞u tr·ªØ c√°c s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã
    displayed_products = set()

    # Th√™m th√¥ng tin v·ªÅ c√°c s·∫£n ph·∫©m ch√≠nh
    for i, product in enumerate(top_products):
        product_info = product["info"]
        product_key = product["key"]

        # Th√™m s·∫£n ph·∫©m v√†o danh s√°ch ƒë√£ hi·ªÉn th·ªã
        displayed_products.add(product_key)

        result += f"{i+1}. **{product_info['name']}**\n"

        # Th√™m th√¥ng tin v·ªÅ danh m·ª•c
        if "category_name" in product_info:
            result += f"   üìÇ **Danh m·ª•c:** {product_info['category_name']}\n"

            # Th√™m m√¥ t·∫£ danh m·ª•c n·∫øu c√≥
            if "category_description" in product_info and product_info["category_description"]:
                category_desc = product_info["category_description"].strip()
                # C·∫Øt b·ªõt m√¥ t·∫£ danh m·ª•c n·∫øu qu√° d√†i
                if len(category_desc) > 150:
                    cut_pos = category_desc.find('.', 100)
                    if cut_pos != -1:
                        category_desc = category_desc[:cut_pos + 1]
                    else:
                        category_desc = category_desc[:150] + "..."
                result += f"   üìù **M√¥ t·∫£ danh m·ª•c:** {category_desc}\n"

        # Th√™m m√¥ t·∫£ s·∫£n ph·∫©m n·∫øu c√≥ v√† kh√¥ng ph·∫£i l√† m√¥ t·∫£ danh m·ª•c
        if "description" in product_info and product_info["description"]:
            # Ki·ªÉm tra xem m√¥ t·∫£ s·∫£n ph·∫©m c√≥ gi·ªëng v·ªõi m√¥ t·∫£ danh m·ª•c kh√¥ng
            category_desc = product_info.get("category_description", "")
            if product_info["description"] != category_desc and product_info["description"].strip():
                # C·∫Øt b·ªõt m√¥ t·∫£ s·∫£n ph·∫©m n·∫øu qu√° d√†i v√† lo·∫°i b·ªè ph·∫ßn l·∫∑p l·∫°i
                product_desc = product_info["description"].strip()
                # T√¨m v√† lo·∫°i b·ªè ph·∫ßn l·∫∑p l·∫°i
                if len(product_desc) > 200:
                    # T√¨m v·ªã tr√≠ c√≥ th·ªÉ c·∫Øt (d·∫•u ch·∫•m ho·∫∑c d·∫•u ph·∫©y)
                    cut_pos = product_desc.find('.', 150)
                    if cut_pos == -1:
                        cut_pos = product_desc.find(',', 150)
                    if cut_pos != -1:
                        product_desc = product_desc[:cut_pos + 1]
                    else:
                        product_desc = product_desc[:200] + "..."

                result += f"   üîç **M√¥ t·∫£ s·∫£n ph·∫©m:** {product_desc}\n"

        # Th√™m th√¥ng tin v·ªÅ bi·∫øn th·ªÉ t·ªët nh·∫•t (ch·ªâ hi·ªÉn th·ªã 1 bi·∫øn th·ªÉ cho m·ªói s·∫£n ph·∫©m)
        if product_info["variants"]:
            # S·∫Øp x·∫øp bi·∫øn th·ªÉ theo x·∫øp h·∫°ng b√°n ch·∫°y
            sorted_variants = sorted(
                product_info["variants"],
                key=lambda x: (float(x.get("sales_rank", 999)) if x.get("sales_rank") is not None else 999)
            )

            # Ch·ªçn bi·∫øn th·ªÉ t·ªët nh·∫•t
            best_variant = sorted_variants[0]

            result += f"\tT√πy ch·ªçn t·ªët nh·∫•t: {best_variant.get('beverage_option', 'Kh√¥ng c√≥')}, "
            result += f"Gi√°: {best_variant.get('price', 'Kh√¥ng c√≥')}, "
            result += f"Calories: {best_variant.get('calories', 'Kh√¥ng c√≥')}, "
            result += f"Protein (g): {best_variant.get('protein_g', 'Kh√¥ng c√≥')}, "
            result += f"ƒê∆∞·ªùng (g): {best_variant.get('sugars_g', 'Kh√¥ng c√≥')}, "
            result += f"Caffeine (mg): {best_variant.get('caffeine_mg', 'Kh√¥ng c√≥')}"

            # Th√™m vitamin n·∫øu c√≥
            if best_variant.get('vitamin_a') and str(best_variant.get('vitamin_a')).replace('%', '').strip() not in ['0', '0.0', '']:
                result += f", Vitamin A: {best_variant.get('vitamin_a')}"
            if best_variant.get('vitamin_c') and str(best_variant.get('vitamin_c')).replace('%', '').strip() not in ['0', '0.0', '']:
                result += f", Vitamin C: {best_variant.get('vitamin_c')}"
            if best_variant.get('dietary_fibre_g') and str(best_variant.get('dietary_fibre_g')).strip() not in ['0', '0.0', '']:
                result += f", Ch·∫•t x∆° (g): {best_variant.get('dietary_fibre_g')}"

            result += "\n"

            # Th√™m variant_id v√†o danh s√°ch ƒë√£ x·ª≠ l√Ω
            if "variant_id" in best_variant:
                processed_variants.add(str(best_variant["variant_id"]))

            # Th√™m th√¥ng tin v·ªÅ s·ªë l∆∞·ª£ng bi·∫øn th·ªÉ kh√°c
            if len(product_info["variants"]) > 1:
                result += f"\t(C√≤n {len(product_info['variants']) - 1} t√πy ch·ªçn kh√°c)\n"

        # Th√™m d√≤ng ph√¢n c√°ch gi·ªØa c√°c s·∫£n ph·∫©m
        result += "\n" + "‚îÄ" * 50 + "\n\n"

    # Th√™m th√¥ng tin v·ªÅ c√°c s·∫£n ph·∫©m c√≤n l·∫°i (ch·ªâ khi c√≥ nhi·ªÅu h∆°n 3 s·∫£n ph·∫©m)
    if remaining_products and len(remaining_products) > 0:
        result += "G·ª¢I √ù TH√äM:\n\n"

        for i, product in enumerate(remaining_products):
            product_info = product["info"]
            product_key = product["key"]

            # Th√™m s·∫£n ph·∫©m v√†o danh s√°ch ƒë√£ hi·ªÉn th·ªã
            displayed_products.add(product_key)

            result += f"{i+1}. **{product_info['name']}**"

            # Th√™m th√¥ng tin v·ªÅ danh m·ª•c
            if "category_name" in product_info:
                result += f": Thu·ªôc danh m·ª•c {product_info['category_name']}"

            result += "\n"

            # Th√™m th√¥ng tin v·ªÅ bi·∫øn th·ªÉ t·ªët nh·∫•t (ch·ªâ hi·ªÉn th·ªã 1 bi·∫øn th·ªÉ cho m·ªói s·∫£n ph·∫©m)
            if product_info["variants"]:
                # S·∫Øp x·∫øp bi·∫øn th·ªÉ theo x·∫øp h·∫°ng b√°n ch·∫°y
                sorted_variants = sorted(
                    product_info["variants"],
                    key=lambda x: (float(x.get("sales_rank", 999)) if x.get("sales_rank") is not None else 999)
                )

                # Ch·ªçn bi·∫øn th·ªÉ t·ªët nh·∫•t
                best_variant = sorted_variants[0]

                result += f"\tT√πy ch·ªçn t·ªët nh·∫•t: {best_variant.get('beverage_option', 'Kh√¥ng c√≥')}, "
                result += f"Gi√°: {best_variant.get('price', 'Kh√¥ng c√≥')}, "
                result += f"Calories: {best_variant.get('calories', 'Kh√¥ng c√≥')}, "
                result += f"Protein (g): {best_variant.get('protein_g', 'Kh√¥ng c√≥')}, "
                result += f"ƒê∆∞·ªùng (g): {best_variant.get('sugars_g', 'Kh√¥ng c√≥')}, "
                result += f"Caffeine (mg): {best_variant.get('caffeine_mg', 'Kh√¥ng c√≥')}"

                # Th√™m vitamin n·∫øu c√≥
                if best_variant.get('vitamin_a') and str(best_variant.get('vitamin_a')).replace('%', '').strip() not in ['0', '0.0', '']:
                    result += f", Vitamin A: {best_variant.get('vitamin_a')}"
                if best_variant.get('vitamin_c') and str(best_variant.get('vitamin_c')).replace('%', '').strip() not in ['0', '0.0', '']:
                    result += f", Vitamin C: {best_variant.get('vitamin_c')}"
                if best_variant.get('dietary_fibre_g') and str(best_variant.get('dietary_fibre_g')).strip() not in ['0', '0.0', '']:
                    result += f", Ch·∫•t x∆° (g): {best_variant.get('dietary_fibre_g')}"

                result += "\n"

                # Th√™m variant_id v√†o danh s√°ch ƒë√£ x·ª≠ l√Ω
                if "variant_id" in best_variant:
                    processed_variants.add(str(best_variant["variant_id"]))

                # Th√™m th√¥ng tin v·ªÅ s·ªë l∆∞·ª£ng bi·∫øn th·ªÉ kh√°c
                if len(product_info["variants"]) > 1:
                    result += f"\t(C√≤n {len(product_info['variants']) - 1} t√πy ch·ªçn kh√°c)\n"

            result += "\n"

    # T√¨m c√°c bi·∫øn th·ªÉ ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω
    unprocessed_variants = []
    for variant in organized_data["all_variants"]:
        if "variant_id" in variant and str(variant["variant_id"]) not in processed_variants:
            unprocessed_variants.append(variant)

    # N·∫øu c√≥ bi·∫øn th·ªÉ ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω, th√™m v√†o ph·∫ßn g·ª£i √Ω
    if unprocessed_variants:
        # T·ªï ch·ª©c c√°c bi·∫øn th·ªÉ ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω theo s·∫£n ph·∫©m
        unprocessed_by_product = {}
        for variant in unprocessed_variants:
            product_id = variant.get("product_id")
            product_name = variant.get("product_name")
            if product_id and product_name:
                product_key = f"{product_id}_{product_name}"
                if product_key not in unprocessed_by_product:
                    unprocessed_by_product[product_key] = {
                        "name": product_name,
                        "category_name": variant.get("category_name", "Kh√¥ng x√°c ƒë·ªãnh"),
                        "variants": []
                    }
                unprocessed_by_product[product_key]["variants"].append(variant)

        # Th√™m c√°c bi·∫øn th·ªÉ ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω v√†o ph·∫ßn g·ª£i √Ω
        if unprocessed_by_product:
            if "G·ª¢I √ù TH√äM:" not in result:
                result += "G·ª¢I √ù TH√äM:\n\n"

            for product_key, product_info in unprocessed_by_product.items():
                result += f"S·∫£n ph·∫©m: {product_info['name']}\n"

                # Th√™m m√¥ t·∫£ s·∫£n ph·∫©m n·∫øu c√≥
                if "description" in product_info and product_info["description"]:
                    result += f"M√¥ t·∫£: {product_info['description']}\n"

                # Th√™m th√¥ng tin v·ªÅ bi·∫øn th·ªÉ t·ªët nh·∫•t (ch·ªâ hi·ªÉn th·ªã 1 bi·∫øn th·ªÉ cho m·ªói s·∫£n ph·∫©m)
                # S·∫Øp x·∫øp bi·∫øn th·ªÉ theo x·∫øp h·∫°ng b√°n ch·∫°y
                sorted_variants = sorted(
                    product_info["variants"],
                    key=lambda x: (float(x.get("sales_rank", 999)) if x.get("sales_rank") is not None else 999)
                )

                # Ch·ªçn bi·∫øn th·ªÉ t·ªët nh·∫•t
                best_variant = sorted_variants[0]

                result += f"\tT√πy ch·ªçn t·ªët nh·∫•t: {best_variant.get('beverage_option', 'Kh√¥ng c√≥')}, "
                result += f"Gi√°: {best_variant.get('price', 'Kh√¥ng c√≥')}, "
                result += f"Calories: {best_variant.get('calories', 'Kh√¥ng c√≥')}, "
                result += f"Protein (g): {best_variant.get('protein_g', 'Kh√¥ng c√≥')}, "
                result += f"ƒê∆∞·ªùng (g): {best_variant.get('sugars_g', 'Kh√¥ng c√≥')}, "
                result += f"Caffeine (mg): {best_variant.get('caffeine_mg', 'Kh√¥ng c√≥')}"

                # Th√™m vitamin n·∫øu c√≥
                if best_variant.get('vitamin_a') and str(best_variant.get('vitamin_a')).replace('%', '').strip() not in ['0', '0.0', '']:
                    result += f", Vitamin A: {best_variant.get('vitamin_a')}"
                if best_variant.get('vitamin_c') and str(best_variant.get('vitamin_c')).replace('%', '').strip() not in ['0', '0.0', '']:
                    result += f", Vitamin C: {best_variant.get('vitamin_c')}"
                if best_variant.get('dietary_fibre_g') and str(best_variant.get('dietary_fibre_g')).strip() not in ['0', '0.0', '']:
                    result += f", Ch·∫•t x∆° (g): {best_variant.get('dietary_fibre_g')}"

                result += "\n"

                # Th√™m th√¥ng tin v·ªÅ s·ªë l∆∞·ª£ng bi·∫øn th·ªÉ kh√°c
                if len(product_info["variants"]) > 1:
                    result += f"\t(C√≤n {len(product_info['variants']) - 1} t√πy ch·ªçn kh√°c)\n"

                result += f"\tThu·ªôc danh m·ª•c {product_info['category_name']}\n\n"

    # Ki·ªÉm tra xem c√≥ s·∫£n ph·∫©m n√†o ch∆∞a ƒë∆∞·ª£c hi·ªÉn th·ªã kh√¥ng
    displayed_products = set()

    # Th√™m c√°c s·∫£n ph·∫©m ƒë√£ hi·ªÉn th·ªã v√†o t·∫≠p h·ª£p
    for product in top_products:
        displayed_products.add(product["key"])

    # Log th√¥ng tin v·ªÅ s·∫£n ph·∫©m h√†ng ƒë·∫ßu
    log_info(f"ƒê√£ hi·ªÉn th·ªã {len(top_products)} s·∫£n ph·∫©m h√†ng ƒë·∫ßu: {', '.join([p['name'] for p in top_products])}")

    for product in remaining_products:
        displayed_products.add(product["key"])

    # Log th√¥ng tin v·ªÅ s·∫£n ph·∫©m g·ª£i √Ω
    if remaining_products:
        log_info(f"ƒê√£ hi·ªÉn th·ªã {len(remaining_products)} s·∫£n ph·∫©m g·ª£i √Ω: {', '.join([p['name'] for p in remaining_products])}")

    # T√¨m c√°c s·∫£n ph·∫©m ch∆∞a ƒë∆∞·ª£c hi·ªÉn th·ªã
    undisplayed_products = {}

    # Duy·ªát qua t·∫•t c·∫£ c√°c bi·∫øn th·ªÉ
    for variant in organized_data["all_variants"]:
        product_id = variant.get("product_id")
        product_name = variant.get("product_name")

        if product_id and product_name:
            product_key = f"{product_id}_{product_name}"

            # Ch·ªâ th√™m v√†o n·∫øu s·∫£n ph·∫©m ch∆∞a ƒë∆∞·ª£c hi·ªÉn th·ªã
            if product_key not in displayed_products:
                if product_key not in undisplayed_products:
                    undisplayed_products[product_key] = {
                        "name": product_name,
                        "variants": []
                    }

                undisplayed_products[product_key]["variants"].append(variant)

    # Ki·ªÉm tra xem c√≥ s·∫£n ph·∫©m n√†o ch∆∞a ƒë∆∞·ª£c hi·ªÉn th·ªã kh√¥ng
    all_products_displayed = True
    undisplayed_product_keys = []

    # T·∫°o danh s√°ch c√°c s·∫£n ph·∫©m ch∆∞a ƒë∆∞·ª£c hi·ªÉn th·ªã
    for product_key in organized_data["by_product"]:
        if product_key not in displayed_products:
            all_products_displayed = False
            undisplayed_product_keys.append(product_key)

    # Ki·ªÉm tra xem c√≥ c·∫ßn hi·ªÉn th·ªã ph·∫ßn g·ª£i √Ω kh√¥ng (ch·ªâ khi c√≥ nhi·ªÅu h∆°n 3 s·∫£n ph·∫©m t·ªïng c·ªông)
    total_products_count = len(organized_data["by_product"])

    # N·∫øu t·ªïng s·ªë s·∫£n ph·∫©m <= 3, kh√¥ng hi·ªÉn th·ªã ph·∫ßn g·ª£i √Ω
    if total_products_count <= 3:
        log_info(f"T·ªïng s·ªë s·∫£n ph·∫©m ({total_products_count}) <= 3, kh√¥ng hi·ªÉn th·ªã ph·∫ßn g·ª£i √Ω")
    elif all_products_displayed:
        # Kh√¥ng hi·ªÉn th·ªã g√¨ th√™m
        log_info("T·∫•t c·∫£ s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã, kh√¥ng hi·ªÉn th·ªã ph·∫ßn DANH S√ÅCH S·∫¢N PH·∫®M G·ª¢I √ù")
    else:
        # Ch·ªâ hi·ªÉn th·ªã c√°c s·∫£n ph·∫©m ch∆∞a ƒë∆∞·ª£c hi·ªÉn th·ªã
        products_to_display = {}

        # L·∫•y th√¥ng tin v·ªÅ c√°c s·∫£n ph·∫©m ch∆∞a ƒë∆∞·ª£c hi·ªÉn th·ªã
        for product_key in undisplayed_product_keys:
            if product_key in organized_data["by_product"]:
                product_info = organized_data["by_product"][product_key]
                products_to_display[product_key] = {
                    "name": product_info["name"],
                    "description": product_info.get("description"),
                    "category_name": product_info.get("category_name", "Kh√¥ng x√°c ƒë·ªãnh"),
                    "category_description": product_info.get("category_description")
                }

        # Ch·ªâ hi·ªÉn th·ªã n·∫øu c√≥ s·∫£n ph·∫©m ch∆∞a ƒë∆∞·ª£c hi·ªÉn th·ªã
        if products_to_display:
            result += "DANH S√ÅCH S·∫¢N PH·∫®M G·ª¢I √ù KH√ÅC:\n\n"

            for i, (product_key, product_info) in enumerate(sorted(products_to_display.items(), key=lambda x: x[1]["name"])):
                result += f"* **{product_info['name']}** (Danh m·ª•c: {product_info['category_name']})\n"
                # Th√™m m√¥ t·∫£ s·∫£n ph·∫©m n·∫øu c√≥ v√† kh√¥ng ph·∫£i l√† m√¥ t·∫£ danh m·ª•c
                if product_info.get("description"):
                    # Ki·ªÉm tra xem m√¥ t·∫£ s·∫£n ph·∫©m c√≥ gi·ªëng v·ªõi m√¥ t·∫£ danh m·ª•c kh√¥ng
                    category_desc = product_info.get("category_description", "")
                    if product_info["description"] != category_desc:
                        result += f"  M√¥ t·∫£: {product_info['description']}\n"
                    elif category_desc:
                        # N·∫øu m√¥ t·∫£ s·∫£n ph·∫©m gi·ªëng v·ªõi m√¥ t·∫£ danh m·ª•c, ch·ªâ hi·ªÉn th·ªã m·ªôt l·∫ßn
                        result += f"  M√¥ t·∫£: {category_desc} (M√¥ t·∫£ danh m·ª•c)\n"

            result += "\n"
        else:
            log_info("Kh√¥ng c√≥ s·∫£n ph·∫©m ch∆∞a ƒë∆∞·ª£c hi·ªÉn th·ªã, kh√¥ng hi·ªÉn th·ªã ph·∫ßn DANH S√ÅCH S·∫¢N PH·∫®M G·ª¢I √ù")

    # N·∫øu c√≥ s·∫£n ph·∫©m ch∆∞a ƒë∆∞·ª£c hi·ªÉn th·ªã v√† kh√¥ng ph·∫£i t·∫•t c·∫£ s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã
    # Ch·ªâ x·ª≠ l√Ω khi t·ªïng s·ªë s·∫£n ph·∫©m > 3
    if undisplayed_products and not all_products_displayed and total_products_count > 3:
        # Ki·ªÉm tra xem c√°c s·∫£n ph·∫©m trong undisplayed_products c√≥ th·ª±c s·ª± ch∆∞a ƒë∆∞·ª£c hi·ªÉn th·ªã kh√¥ng
        real_undisplayed = {}
        for product_key, product_info in undisplayed_products.items():
            if product_key not in displayed_products and product_key not in products_to_display:
                real_undisplayed[product_key] = product_info

        # Log th√¥ng tin v·ªÅ s·∫£n ph·∫©m ch∆∞a ƒë∆∞·ª£c hi·ªÉn th·ªã
        if real_undisplayed:
            log_info(f"C√≥ {len(real_undisplayed)} s·∫£n ph·∫©m ch∆∞a ƒë∆∞·ª£c hi·ªÉn th·ªã: {', '.join([info['name'] for info in real_undisplayed.values()])}")
        else:
            log_info("Kh√¥ng c√≥ s·∫£n ph·∫©m th·ª±c s·ª± ch∆∞a ƒë∆∞·ª£c hi·ªÉn th·ªã")

        # Ch·ªâ hi·ªÉn th·ªã n·∫øu c√≥ s·∫£n ph·∫©m th·ª±c s·ª± ch∆∞a ƒë∆∞·ª£c hi·ªÉn th·ªã
        if real_undisplayed:
            # N·∫øu ch∆∞a c√≥ ph·∫ßn "DANH S√ÅCH S·∫¢N PH·∫®M G·ª¢I √ù KH√ÅC", th√™m v√†o
            if "DANH S√ÅCH S·∫¢N PH·∫®M G·ª¢I √ù KH√ÅC" not in result:
                result += "DANH S√ÅCH S·∫¢N PH·∫®M G·ª¢I √ù KH√ÅC:\n\n"

            # S·∫Øp x·∫øp c√°c s·∫£n ph·∫©m theo t√™n
            for i, (product_key, product_info) in enumerate(sorted(real_undisplayed.items(), key=lambda x: x[1]["name"])):
                result += f"{i+1}. **{product_info['name']}**"

                # Th√™m th√¥ng tin v·ªÅ danh m·ª•c n·∫øu c√≥
                if "category_name" in product_info:
                    result += f": Thu·ªôc danh m·ª•c {product_info['category_name']}"

                result += "\n"

                # Th√™m m√¥ t·∫£ s·∫£n ph·∫©m n·∫øu c√≥ v√† kh√¥ng ph·∫£i l√† m√¥ t·∫£ danh m·ª•c
                if "description" in product_info and product_info["description"]:
                    # Ki·ªÉm tra xem m√¥ t·∫£ s·∫£n ph·∫©m c√≥ gi·ªëng v·ªõi m√¥ t·∫£ danh m·ª•c kh√¥ng
                    category_desc = product_info.get("category_description", "")
                    if product_info["description"] != category_desc:
                        result += f"M√¥ t·∫£: {product_info['description']}\n"
                    elif category_desc:
                        # N·∫øu m√¥ t·∫£ s·∫£n ph·∫©m gi·ªëng v·ªõi m√¥ t·∫£ danh m·ª•c, ch·ªâ hi·ªÉn th·ªã m·ªôt l·∫ßn
                        result += f"M√¥ t·∫£: {category_desc} (M√¥ t·∫£ danh m·ª•c)\n"

                # S·∫Øp x·∫øp c√°c bi·∫øn th·ªÉ theo x·∫øp h·∫°ng b√°n ch·∫°y
                sorted_variants = sorted(
                    product_info["variants"],
                    key=lambda x: (float(x.get("sales_rank", 999)) if x.get("sales_rank") is not None else 999)
                )

                # Th√™m th√¥ng tin v·ªÅ bi·∫øn th·ªÉ t·ªët nh·∫•t (ch·ªâ hi·ªÉn th·ªã 1 bi·∫øn th·ªÉ cho m·ªói s·∫£n ph·∫©m)
                if sorted_variants:
                    # Ch·ªçn bi·∫øn th·ªÉ t·ªët nh·∫•t
                    best_variant = sorted_variants[0]

                    result += f"\tT√πy ch·ªçn t·ªët nh·∫•t: {best_variant.get('beverage_option', 'Kh√¥ng c√≥')}, "
                    result += f"Gi√°: {best_variant.get('price', 'Kh√¥ng c√≥')}, "
                    result += f"Calories: {best_variant.get('calories', 'Kh√¥ng c√≥')}, "
                    result += f"Protein (g): {best_variant.get('protein_g', 'Kh√¥ng c√≥')}, "
                    result += f"ƒê∆∞·ªùng (g): {best_variant.get('sugars_g', 'Kh√¥ng c√≥')}, "
                    result += f"Caffeine (mg): {best_variant.get('caffeine_mg', 'Kh√¥ng c√≥')}"

                    # Th√™m vitamin n·∫øu c√≥
                    if best_variant.get('vitamin_a') and str(best_variant.get('vitamin_a')).replace('%', '').strip() not in ['0', '0.0', '']:
                        result += f", Vitamin A: {best_variant.get('vitamin_a')}"
                    if best_variant.get('vitamin_c') and str(best_variant.get('vitamin_c')).replace('%', '').strip() not in ['0', '0.0', '']:
                        result += f", Vitamin C: {best_variant.get('vitamin_c')}"
                    if best_variant.get('dietary_fibre_g') and str(best_variant.get('dietary_fibre_g')).strip() not in ['0', '0.0', '']:
                        result += f", Ch·∫•t x∆° (g): {best_variant.get('dietary_fibre_g')}"

                    result += "\n"

                    # Th√™m th√¥ng tin v·ªÅ s·ªë l∆∞·ª£ng bi·∫øn th·ªÉ kh√°c
                    if len(sorted_variants) > 1:
                        result += f"\t(C√≤n {len(sorted_variants) - 1} t√πy ch·ªçn kh√°c)\n"

                result += "\n"
        else:
            log_info("Kh√¥ng c√≥ s·∫£n ph·∫©m v·ªõi bi·∫øn th·ªÉ ch∆∞a ƒë∆∞·ª£c hi·ªÉn th·ªã, kh√¥ng hi·ªÉn th·ªã ph·∫ßn DANH S√ÅCH S·∫¢N PH·∫®M G·ª¢I √ù KH√ÅC")
    elif total_products_count <= 3:
        log_info("T·ªïng s·ªë s·∫£n ph·∫©m <= 3, b·ªè qua ph·∫ßn x·ª≠ l√Ω s·∫£n ph·∫©m ch∆∞a hi·ªÉn th·ªã")

    return result


def process_results(message: str, results: List[Dict], context: Dict = None) -> str:
    """X·ª≠ l√Ω k·∫øt qu·∫£ truy v·∫•n v·ªõi LLM v√† retry logic"""
    log_info("\n4Ô∏è‚É£ Processing query results...")
    log_info(f"üìù Original message: {message}")
    log_info(f"üìã Processing {len(results)} results")

    # Log th√¥ng tin v·ªÅ k·∫øt qu·∫£ truy v·∫•n
    _log_entity_ids(results)

    if not results:
        log_info("‚ùå No results to process")
        return "Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin ph√π h·ª£p v·ªõi c√¢u h·ªèi c·ªßa b·∫°n."

    # X√°c ƒë·ªãnh lo·∫°i k·∫øt qu·∫£ (s·∫£n ph·∫©m, c·ª≠a h√†ng, ƒë∆°n h√†ng)
    result_type = _determine_result_type(results)
    log_info(f"üìä Determined result type: {result_type}")

    max_retries = 3
    retry_delay = 2

    for attempt in range(max_retries):
        try:
            # TƒÉng c∆∞·ªùng message v·ªõi ng·ªØ c·∫£nh t·ª´ l·ªãch s·ª≠ chat
            enhanced_message = message

            if context and 'chat_context' in context and context['chat_context']:
                chat_context = context['chat_context']
                log_info(f"Using chat context for result processing: {str(chat_context)[:200]}...")

                # N·∫øu c√≥ s·∫£n ph·∫©m ƒë∆∞·ª£c nh·∫Øc ƒë·∫øn, th√™m v√†o message
                if 'mentioned_products' in chat_context and chat_context['mentioned_products']:
                    products = ', '.join(chat_context['mentioned_products'])
                    if "ƒë√≥" in message.lower() or "n√†y" in message.lower() or "kia" in message.lower() or "lo·∫°i" in message.lower():
                        enhanced_message = f"{message} (ƒêang ƒë·ªÅ c·∫≠p ƒë·∫øn s·∫£n ph·∫©m: {products})"
                        log_info(f"Enhanced message with mentioned products: {enhanced_message}")

                # N·∫øu c√≥ danh m·ª•c ƒë∆∞·ª£c nh·∫Øc ƒë·∫øn, th√™m v√†o message
                if 'mentioned_categories' in chat_context and chat_context['mentioned_categories']:
                    categories = ', '.join(chat_context['mentioned_categories'])
                    if "ƒë√≥" in message.lower() or "n√†y" in message.lower() or "kia" in message.lower() or "lo·∫°i" in message.lower():
                        enhanced_message = f"{enhanced_message} (Danh m·ª•c: {categories})"
                        log_info(f"Enhanced message with mentioned categories: {enhanced_message}")

                # N·∫øu c√≥ context_summary, th√™m v√†o message
                if 'context_summary' in chat_context and chat_context['context_summary']:
                    enhanced_message = f"{enhanced_message} (Ng·ªØ c·∫£nh: {chat_context['context_summary']})"
                    log_info(f"Enhanced message with context summary: {enhanced_message}")

                # N·∫øu c√≥ last_intent, th√™m v√†o message
                if 'last_intent' in chat_context and chat_context['last_intent']:
                    enhanced_message = f"{enhanced_message} (√ù ƒë·ªãnh t√¨m ki·∫øm g·∫ßn ƒë√¢y: {chat_context['last_intent']})"
                    log_info(f"Enhanced message with last intent: {enhanced_message}")

                # N·∫øu c√≥ preferences, th√™m v√†o message
                if 'preferences' in chat_context and chat_context['preferences']:
                    preferences = ', '.join(chat_context['preferences'])
                    enhanced_message = f"{enhanced_message} (S·ªü th√≠ch c·ªßa kh√°ch h√†ng: {preferences})"
                    log_info(f"Enhanced message with preferences: {enhanced_message}")

                # N·∫øu c√≥ price_requirements, th√™m v√†o message
                if 'price_requirements' in chat_context and chat_context['price_requirements']:
                    enhanced_message = f"{enhanced_message} (Y√™u c·∫ßu gi√° ƒë√£ ƒë·ªÅ c·∫≠p tr∆∞·ªõc ƒë√≥: {chat_context['price_requirements']})"
                    log_info(f"Enhanced message with price requirements: {enhanced_message}")

                # N·∫øu c√≥ recent_references, th√™m v√†o message
                if 'recent_references' in chat_context and chat_context['recent_references']:
                    enhanced_message = f"{enhanced_message} (L∆∞u √Ω: {chat_context['recent_references']})"
                    log_info(f"Enhanced message with recent references: {enhanced_message}")

            # S·ª≠ d·ª•ng gemini_client v·ªõi temperature th·∫•p ƒë·ªÉ c√≥ c√¢u tr·∫£ l·ªùi ch√≠nh x√°c v√† d·ª±a tr√™n d·ªØ li·ªáu
            # L∆∞u temperature hi·ªán t·∫°i
            current_temp = gemini_client._temperature

            # ƒê·∫∑t temperature th·∫•p cho vi·ªác t·∫°o c√¢u tr·∫£ l·ªùi ch√≠nh x√°c
            gemini_client._temperature = 0.1

            # L·∫•y model t·ª´ gemini_client
            llm = gemini_client.model

            # T·∫°o prompt t·ª´ template
            prompt = PromptTemplate(
                input_variables=["question", "context"],
                template=RESULT_PROCESSING_TEMPLATE
            )

            # T·∫°o chain
            chain = prompt | llm | StrOutputParser()

            # L·ªçc k·∫øt qu·∫£ ƒë·ªÉ ƒë·∫£m b·∫£o b·∫£o m·∫≠t th√¥ng tin kh√°ch h√†ng
            filtered_results = _filter_sensitive_data(results, context)

            # L·∫•y 3 k·∫øt qu·∫£ t·ªët nh·∫•t l√†m ƒë·∫ßu v√†o cho vi·ªác tr·∫£ l·ªùi c√¢u h·ªèi
            # Gi·∫£ ƒë·ªãnh r·∫±ng k·∫øt qu·∫£ ƒë√£ ƒë∆∞·ª£c s·∫Øp x·∫øp theo th·ª© t·ª± ∆∞u ti√™n t·ª´ truy v·∫•n Cypher
            best_results = filtered_results[:3]  # L·∫•y 3 k·∫øt qu·∫£ ƒë·∫ßu ti√™n (t·ªët nh·∫•t)

            # Log th√¥ng tin v·ªÅ s·ªë l∆∞·ª£ng k·∫øt qu·∫£
            log_info(f"üìä T·ªïng s·ªë k·∫øt qu·∫£: {len(filtered_results)}, s·ª≠ d·ª•ng 3 k·∫øt qu·∫£ t·ªët nh·∫•t")

            # Ki·ªÉm tra xem k·∫øt qu·∫£ c√≥ ph·∫£i l√† t·ª´ GraphRAG agent kh√¥ng
            log_info(f"Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu t·ª´ GraphRAG agent...")

            # Log th√¥ng tin chi ti·∫øt v·ªÅ k·∫øt qu·∫£
            for i, result in enumerate(best_results):
                log_info(f"K·∫øt qu·∫£ {i+1}:")
                for key in result.keys():
                    log_info(f"  - {key}: {str(result[key])[:100]}...")

            # T·ªï ch·ª©c d·ªØ li·ªáu theo s·∫£n ph·∫©m v√† danh m·ª•c
            organized_data = _organize_variants_by_product_and_category(best_results)

            # ƒê·ªãnh d·∫°ng d·ªØ li·ªáu ƒë√£ t·ªï ch·ª©c ƒë·ªÉ truy·ªÅn cho LLM
            formatted_data = _format_organized_data_for_llm(organized_data)

            log_info(f"üìã Formatted organized data: {formatted_data[:500]}...")

            # Th√™m th√¥ng tin v·ªÅ lo·∫°i k·∫øt qu·∫£ v√†o context
            invoke_context = {
                "question": enhanced_message,  # S·ª≠ d·ª•ng enhanced_message thay v√¨ message
                "context": formatted_data,
                "result_type": result_type
            }

            # N·∫øu l√† ƒë∆°n h√†ng v√† c√≥ th√¥ng tin kh√°ch h√†ng, th√™m v√†o context
            if result_type == "order" and context and 'customer_info' in context:
                customer_info = context.get('customer_info', {})
                customer_name = customer_info.get('name', '')
                customer_id = customer_info.get('id', '')
                if customer_name:
                    invoke_context["customer_name"] = customer_name
                if customer_id:
                    invoke_context["customer_id"] = customer_id

            # Generate response
            response = chain.invoke(invoke_context)

            # Kh√¥i ph·ª•c temperature ban ƒë·∫ßu
            gemini_client._temperature = current_temp

            if response:
                log_info(f"üí¨ Generated response: {response}")
                return response
            else:
                log_error("No response generated")
                continue

        except Exception as e:
            log_error(f"‚ùå Error processing results (attempt {attempt + 1}/{max_retries}): {str(e)}")
            if attempt < max_retries - 1:
                time.sleep(retry_delay)
                retry_delay *= 2

    return "Xin l·ªói, ƒë√£ c√≥ l·ªói khi x·ª≠ l√Ω k·∫øt qu·∫£. Vui l√≤ng th·ª≠ l·∫°i sau."
