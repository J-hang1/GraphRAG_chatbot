import os
import json
import uuid
import sys
import datetime
from flask import current_app, request

# ƒê·∫£m b·∫£o terminal c√≥ th·ªÉ hi·ªÉn th·ªã ti·∫øng Vi·ªát
if sys.platform == 'win32':
    # ƒê·ªëi v·ªõi Windows
    import ctypes
    kernel32 = ctypes.windll.kernel32
    kernel32.SetConsoleCP(65001)
    kernel32.SetConsoleOutputCP(65001)

# ƒê·∫£m b·∫£o stdout s·ª≠ d·ª•ng UTF-8
if hasattr(sys.stdout, 'reconfigure'):
    sys.stdout.reconfigure(encoding='utf-8')

# M√†u s·∫Øc cho terminal
class TerminalColors:
    HEADER = '\033[95m'
    INFO = '\033[94m'
    SUCCESS = '\033[92m'
    WARNING = '\033[93m'
    ERROR = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def setup_logger(app):
    """
    Thi·∫øt l·∫≠p logger cho ·ª©ng d·ª•ng (gi·ªù ch·ªâ in ra terminal)

    Args:
        app: Th·ªÉ hi·ªán c·ªßa ·ª©ng d·ª•ng Flask
    """
    # T·∫°o th∆∞ m·ª•c logs n·∫øu n√≥ kh√¥ng t·ªìn t·∫°i (v·∫´n gi·ªØ l·∫°i ƒë·ªÉ t∆∞∆°ng th√≠ch)
    logs_dir = os.path.join(app.root_path, '..', 'logs')
    if not os.path.exists(logs_dir):
        os.makedirs(logs_dir)

    print(f"{TerminalColors.SUCCESS}[SYSTEM] Chatbot kh·ªüi ƒë·ªông th√†nh c√¥ng{TerminalColors.ENDC}")

def get_trace_id():
    """L·∫•y trace ID t·ª´ request ho·∫∑c t·∫°o m·ªõi"""
    try:
        if hasattr(request, 'trace_id'):
            return request.trace_id
    except RuntimeError:
        # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p kh√¥ng c√≥ request context
        pass
    return str(uuid.uuid4())

def format_log(message, context=None):
    """Format log message v·ªõi context"""
    timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    trace_id = get_trace_id()

    if context:
        context_str = f" | Context: {json.dumps(context, ensure_ascii=False)}"
    else:
        context_str = ""

    return f"[{timestamp}] [{trace_id}] {message}{context_str}"

def log_chat(user_id, message, response):
    """
    In log t∆∞∆°ng t√°c chat

    Args:
        user_id: ID ng∆∞·ªùi d√πng
        message: Tin nh·∫Øn ng∆∞·ªùi d√πng
        response: Ph·∫£n h·ªìi c·ªßa h·ªá th·ªëng
    """
    log_message = format_log(
        message=f"üí¨ CHAT | User: {user_id}",
        context={
            'message': message,
            'response': response[:100] + '...' if len(response) > 100 else response
        }
    )
    print(f"{TerminalColors.INFO}{log_message}{TerminalColors.ENDC}")

def log_error(error, context=None):
    """
    In log l·ªói

    Args:
        error: Th√¥ng b√°o l·ªói ho·∫∑c ngo·∫°i l·ªá
        context: Th√¥ng tin ng·ªØ c·∫£nh b·ªï sung
    """
    # X·ª≠ l√Ω c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát trong chu·ªói error
    error_str = str(error)
    error_str = error_str.replace("%", "%%")

    log_message = format_log(
        message=f"‚ùå ERROR | {error_str}",
        context=context
    )
    print(f"{TerminalColors.ERROR}{log_message}{TerminalColors.ENDC}")

def log_warning(warning, context=None):
    """
    In log c·∫£nh b√°o

    Args:
        warning: Th√¥ng b√°o c·∫£nh b√°o
        context: Th√¥ng tin ng·ªØ c·∫£nh b·ªï sung
    """
    log_message = format_log(
        message=f"‚ö†Ô∏è WARNING | {warning}",
        context=context
    )
    print(f"{TerminalColors.WARNING}{log_message}{TerminalColors.ENDC}")

def log_info(message, context=None):
    """
    In log th√¥ng tin

    Args:
        message: Th√¥ng b√°o th√¥ng tin
        context: Th√¥ng tin ng·ªØ c·∫£nh b·ªï sung
    """
    # X·ª≠ l√Ω c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát trong chu·ªói message
    # ƒê·∫∑c bi·ªát l√† k√Ω t·ª± % ƒë∆∞·ª£c s·ª≠ d·ª•ng trong c√°c h√†m ƒë·ªãnh d·∫°ng chu·ªói
    if isinstance(message, str):
        message = message.replace("%", "%%")

    log_message = format_log(
        message=f"‚ÑπÔ∏è INFO | {message}",
        context=context
    )
    print(f"{TerminalColors.INFO}{log_message}{TerminalColors.ENDC}")
